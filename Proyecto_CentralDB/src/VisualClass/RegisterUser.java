/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VisualClass;

import ObjClass.COMPortInfo;
import ObjClass.DBQuery;
import ObjClass.DBUsers;
import ObjClass.DBMaterial;
import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;
import java.io.PrintStream;
import java.util.Enumeration;
import java.util.Scanner;
import java.util.Vector;
import javax.swing.JOptionPane;
import java.util.Arrays;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;


public class RegisterUser extends javax.swing.JFrame {

    DBUsers DBUsersTag = null;
    DBMaterial DBMaterialTag = null;
    DBQuery DBQueryTag = null;
    COMPortInfo COMPort = null;
    CommPort COMPortInterface = null;
    SerialPort SerialPortInterface = null;
    /* Serial Port State Machine */
    enum SerialPortStates
    {
        SerialPortIdle,
        SerialPortSendF1Message,
        SerialPortSendF2Message,
        SerialPortSendF3Message,
        SerialPortSendF4Message
    }
    SerialPortStates SerialPortStateMachine = SerialPortStates.SerialPortIdle;
   
    Timer TimerInstance = new Timer(1000, new ActionListener()
    {
        public void actionPerformed (ActionEvent evt)
        {
            TimerHandler();
        }
    });
    
    public RegisterUser()
    {
        initComponents();
    }
    
    public RegisterUser(COMPortInfo COMPort) throws Exception{
        
        initComponents();
        
        /* Get the list of the COM ports */
        Enumeration COMPortsEnum = CommPortIdentifier.getPortIdentifiers();
        CommPortIdentifier COMPortId = null;
        this.COMPort = COMPort;
        
        /* Connect with the COM port selected */
        while(COMPortsEnum.hasMoreElements())
        {
            COMPortId = (CommPortIdentifier) COMPortsEnum.nextElement();
            if(COMPortId.getName().equals(this.COMPort.GetCOMPortName()))
            {
                break;   
            }
        }
        
        /* Configure the Serial Port interface at 115200bps, 1 stop bit, no parity. Configure a listener for Serial Port inputs*/
        COMPortInterface = COMPortId.open("Serial Port", 1000);
        SerialPortInterface = (SerialPort)COMPortInterface;
        SerialPortInterface.setSerialPortParams(115200, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);
        SerialPortInterface.addEventListener(new RegisterUser.SerialPortListener());
        SerialPortInterface.notifyOnDataAvailable(true);

        /* Send F0: BLE Status Request packet */
        PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
        UartTransmit.println("F0:");
        
        /* Create database objects */
        try
        {
            DBUsersTag = new DBUsers();
            DBMaterialTag = new DBMaterial();
            DBQueryTag = new DBQuery();
            this.COMPort = COMPort;
        }
        catch(Exception exception)
        {
            JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
        }
              
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupLockers = new javax.swing.ButtonGroup();
        jLabelRegisterUser = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jLabelRegister = new javax.swing.JLabel();
        jTextFieldRegister = new javax.swing.JTextField();
        jButtonRegister = new javax.swing.JButton();
        jLabelDeleteRegister = new javax.swing.JLabel();
        jLabelDeleteUser = new javax.swing.JLabel();
        jTextFieldDeleteRegister = new javax.swing.JTextField();
        jButtonDelete = new javax.swing.JButton();
        jLabelRegisterMaterial = new javax.swing.JLabel();
        jRadioButtonLockerA = new javax.swing.JRadioButton();
        jRadioButtonLockerB = new javax.swing.JRadioButton();
        jRadioButtonLockerC = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSetDescription = new javax.swing.JTextArea();
        jButtonRegisterMaterial = new javax.swing.JButton();
        jButtonUpdateDesc = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelRegisterUser.setText("Register User");

        jLabelName.setText("Name");

        jLabelRegister.setText("Register");

        jButtonRegister.setText("Register");
        jButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterActionPerformed(evt);
            }
        });

        jLabelDeleteRegister.setText("Register");

        jLabelDeleteUser.setText("Delete User");

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jLabelRegisterMaterial.setText("Register Material");

        buttonGroupLockers.add(jRadioButtonLockerA);
        jRadioButtonLockerA.setText("Locker A");

        buttonGroupLockers.add(jRadioButtonLockerB);
        jRadioButtonLockerB.setText("Locker B");

        buttonGroupLockers.add(jRadioButtonLockerC);
        jRadioButtonLockerC.setText("Locker C");

        jTextAreaSetDescription.setColumns(20);
        jTextAreaSetDescription.setRows(5);
        jScrollPane1.setViewportView(jTextAreaSetDescription);

        jButtonRegisterMaterial.setText("Register Material");
        jButtonRegisterMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterMaterialActionPerformed(evt);
            }
        });

        jButtonUpdateDesc.setText("Update Description");
        jButtonUpdateDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateDescActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelRegister)
                            .addComponent(jLabelName))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldRegister, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(jTextFieldName)))
                    .addComponent(jLabelRegisterUser)
                    .addComponent(jButtonRegister)
                    .addComponent(jRadioButtonLockerC)
                    .addComponent(jRadioButtonLockerB)
                    .addComponent(jRadioButtonLockerA)
                    .addComponent(jLabelRegisterMaterial)
                    .addComponent(jButtonRegisterMaterial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelDeleteUser)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelDeleteRegister)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldDeleteRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonDelete))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonUpdateDesc)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRegisterUser)
                    .addComponent(jLabelDeleteUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDeleteRegister)
                    .addComponent(jTextFieldDeleteRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRegister)
                    .addComponent(jTextFieldRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRegister)
                    .addComponent(jButtonDelete))
                .addGap(18, 18, 18)
                .addComponent(jLabelRegisterMaterial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButtonLockerA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonLockerB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonLockerC))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRegisterMaterial)
                    .addComponent(jButtonUpdateDesc))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegisterActionPerformed
    
        if (COMPort.GetBLEisConnected())
        {
            try
            {
                int UserRegister = Integer.parseInt(jTextFieldRegister.getText());
            
                if (jTextFieldRegister.getText().length() == 8)
                {
                    if (jTextFieldName.getText().length() <= 16 && !jTextFieldName.getText().isEmpty())
                    {
                        try 
                        {   
                            DBQueryTag.OpenDB();
                            DBUsersTag = DBQueryTag.SelectUsersTableByRegister(UserRegister);
            
                            if(DBUsersTag != null)
                            {
                                JOptionPane.showMessageDialog(rootPane, "This user already exists");    
                            }
                            else
                            {
                                DBUsersTag = new DBUsers();
                                DBUsersTag.SetName(jTextFieldName.getText());
                                DBUsersTag.SetRegister(Integer.parseInt(jTextFieldRegister.getText()));
                                DBQueryTag.InsertUsersTable(DBUsersTag);
                                /* Start Serial String Timer Send F1 and F2 Messages (Name and Register)*/
                                SerialPortStateMachine = SerialPortStates.SerialPortSendF1Message;
                                TimerInstance.start();
                                jTextFieldName.setText(null);
                                jTextFieldRegister.setText(null);
                                JOptionPane.showMessageDialog(rootPane, "User registered successfully!");                    
                            }                
            
                           DBQueryTag.CloseDB();
                        }
                        catch(Exception exception)
                        {
                            JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "Name must contain 16 or less characters");
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "Register must contain 8 characters");
                }
            }
            catch (NumberFormatException exeption)
            {
                JOptionPane.showMessageDialog(rootPane, "Register must only contain numbers\n\r" + exeption); 
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "Please connect via BLE with the locker");
        }
    }//GEN-LAST:event_jButtonRegisterActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        
        if(COMPort.GetBLEisConnected())
        {
            try
            {
                int UserRegister = Integer.parseInt(jTextFieldDeleteRegister.getText());
            
                if (jTextFieldDeleteRegister.getText().length() == 8)
                {
                    try 
                    {
                        DBQueryTag.OpenDB();
                        DBUsersTag = DBQueryTag.SelectUsersTableByRegister(UserRegister);
            
                        if(DBUsersTag != null)
                        {
                            if(JOptionPane.showConfirmDialog(rootPane, "Do you really want to delete the user?") == 0)
                            {
                                DBQueryTag.DeleteUsersTable(Integer.parseInt(jTextFieldDeleteRegister.getText()));
                                jTextFieldDeleteRegister.setText(null);
                                JOptionPane.showMessageDialog(rootPane, "User deleted successfully!");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(rootPane, "User not found");
                        }
            
                        DBQueryTag.CloseDB();
                    }
                    catch(Exception exception)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "Register must contain 8 characters");
                }
            }
            catch (NumberFormatException exeption)
            {
                JOptionPane.showMessageDialog(rootPane, "Register must only contain numbers\n\r" + exeption); 
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "Please connect via BLE with the locker");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonRegisterMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegisterMaterialActionPerformed
        // TODO add your handling code here:
        int MaterialCount, MaterialKey;
        if(COMPort.GetBLEisConnected())
        {
            try
            {
                DBQueryTag.OpenDB();
                if(jRadioButtonLockerA.isSelected())
                {
                    DBMaterialTag = DBQueryTag.SelectMaterialLockerId("A");
                    if(DBMaterialTag != null)
                    {
                        MaterialCount = DBMaterialTag.GetLockerMaterialCount();
                        System.out.println(MaterialCount);
                        switch(MaterialCount)
                        {
                            case 0:
                            {
                                MaterialCount = MaterialCount + 1;
                                MaterialKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                                UartTransmit.println("F4:AA" + MaterialKey);    
                                DBQueryTag.UpdateMaterialATableByDescription(MaterialCount, MaterialKey,"A");
                                JOptionPane.showMessageDialog(rootPane, "Material registered successfully!");
                            }
                            break;
                            case 1:
                            {
                                MaterialCount = MaterialCount + 1;
                                MaterialKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                                UartTransmit.println("F4:AB" + MaterialKey); 
                                DBQueryTag.UpdateMaterialBTableByDescription(MaterialCount, MaterialKey,"A");
                                JOptionPane.showMessageDialog(rootPane, "Material registered successfully!");
                            }
                            break;
                            case 2:
                            {
                                MaterialCount = MaterialCount + 1;
                                MaterialKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                                UartTransmit.println("F4:AC" + MaterialKey); 
                                DBQueryTag.UpdateMaterialCTableByDescription(MaterialCount, MaterialKey,"A");
                                JOptionPane.showMessageDialog(rootPane, "Material registered successfully!");
                            }
                            break;
                            case 3:
                            {
                                if(JOptionPane.showConfirmDialog(rootPane, "Maximum number of elements. Do you want to overwrite the current material list?") == 0)
                                {
                                    MaterialCount = 0;
                                    DBQueryTag.UpdateMaterialATableByDescription(MaterialCount, 0,"A");
                                    DBQueryTag.UpdateMaterialBTableByDescription(MaterialCount, 0,"A");
                                    DBQueryTag.UpdateMaterialCTableByDescription(MaterialCount, 0,"A");
                                }
                            }
                            break;
                        }    
                    }
                }
                else if(jRadioButtonLockerB.isSelected())
                {   
                    DBMaterialTag = DBQueryTag.SelectMaterialLockerId("B");
                    if(DBMaterialTag != null)
                    {
                        MaterialCount = DBMaterialTag.GetLockerMaterialCount();
                        System.out.println(MaterialCount);
                        switch(MaterialCount)
                        {
                            case 0:
                            {
                                MaterialCount = MaterialCount + 1;
                                MaterialKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                                UartTransmit.println("F4:BA" + MaterialKey);
                                DBQueryTag.UpdateMaterialATableByDescription(MaterialCount, MaterialKey,"B");
                                JOptionPane.showMessageDialog(rootPane, "Material registered successfully!");
                            }
                            break;
                            case 1:
                            {
                                MaterialCount = MaterialCount + 1;
                                MaterialKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                                UartTransmit.println("F4:BB" + MaterialKey);                                
                                DBQueryTag.UpdateMaterialBTableByDescription(MaterialCount, MaterialKey,"B");
                                JOptionPane.showMessageDialog(rootPane, "Material registered successfully!");
                            }
                            break;
                            case 2:
                            {
                                MaterialCount = MaterialCount + 1;
                                MaterialKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                                UartTransmit.println("F4:BC" + MaterialKey);                                
                                DBQueryTag.UpdateMaterialCTableByDescription(MaterialCount, MaterialKey,"B");
                                JOptionPane.showMessageDialog(rootPane, "Material registered successfully!");
                            }
                            break;
                            case 3:
                            {
                                if(JOptionPane.showConfirmDialog(rootPane, "Maximum number of elements. Do you want to overwrite the current material list?") == 0)
                                {
                                    MaterialCount = 0;
                                    DBQueryTag.UpdateMaterialATableByDescription(MaterialCount, 0,"B");
                                    DBQueryTag.UpdateMaterialBTableByDescription(MaterialCount, 0,"B");
                                    DBQueryTag.UpdateMaterialCTableByDescription(MaterialCount, 0,"B");
                                }
                            }
                            break;
                        } 
                    }
                }
                else if(jRadioButtonLockerC.isSelected())
                {
                    DBMaterialTag = DBQueryTag.SelectMaterialLockerId("C");
                    if(DBMaterialTag != null)
                    {
                        MaterialCount = DBMaterialTag.GetLockerMaterialCount();
                        System.out.println(MaterialCount);
                        switch(MaterialCount)
                        {
                            case 0:
                            {
                                MaterialCount = MaterialCount + 1; 
                                MaterialKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                                UartTransmit.println("F4:CA" + MaterialKey);                                 
                                DBQueryTag.UpdateMaterialATableByDescription(MaterialCount, MaterialKey,"C");
                                JOptionPane.showMessageDialog(rootPane, "Material registered successfully!");
                            }
                            break;
                            case 1:
                            {
                                MaterialCount = MaterialCount + 1;
                                MaterialKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                                UartTransmit.println("F4:CB" + MaterialKey);                                 
                                DBQueryTag.UpdateMaterialBTableByDescription(MaterialCount, MaterialKey,"C");
                                JOptionPane.showMessageDialog(rootPane, "Material registered successfully!");
                            }
                            break;
                            case 2:
                            {
                                MaterialCount = MaterialCount + 1;
                                MaterialKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                                UartTransmit.println("F4:CC" + MaterialKey);                                 
                                DBQueryTag.UpdateMaterialCTableByDescription(MaterialCount, MaterialKey,"C");
                                JOptionPane.showMessageDialog(rootPane, "Material registered successfully!");
                            }
                            break;
                            case 3:
                            {
                                if(JOptionPane.showConfirmDialog(rootPane, "Maximum number of elements. Do you want to overwrite the current material list?") == 0)
                                {
                                    MaterialCount = 0;
                                    DBQueryTag.UpdateMaterialATableByDescription(MaterialCount, 0,"C");
                                    DBQueryTag.UpdateMaterialBTableByDescription(MaterialCount, 0,"C");
                                    DBQueryTag.UpdateMaterialCTableByDescription(MaterialCount, 0,"C");
                                }
                            }
                            break;
                        }    
                    }            
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "Select an option");
                }
            
                DBQueryTag.CloseDB();
            }
            catch(Exception exception)
            {
                JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "Please connect via BLE with the locker");
        }        
    }//GEN-LAST:event_jButtonRegisterMaterialActionPerformed

    private void jButtonUpdateDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateDescActionPerformed
        // TODO add your handling code here:
        if(jTextAreaSetDescription.getText().length() > 200)
        {
            JOptionPane.showMessageDialog(rootPane, "Description too long. Maximum number of symbols is 200");
        }
        else
        {
            try
            {
                DBQueryTag.OpenDB();
                
                if(jRadioButtonLockerA.isSelected())
                {
                    DBQueryTag.UpdateMaterialDescription(jTextAreaSetDescription.getText(),"A");
                    JOptionPane.showMessageDialog(rootPane, "Description updated");
                }
                else if(jRadioButtonLockerB.isSelected())
                {
                    DBQueryTag.UpdateMaterialDescription(jTextAreaSetDescription.getText(),"B");
                    JOptionPane.showMessageDialog(rootPane, "Description updated");
                }
                else if(jRadioButtonLockerC.isSelected())
                {
                    DBQueryTag.UpdateMaterialDescription(jTextAreaSetDescription.getText(),"C");
                    JOptionPane.showMessageDialog(rootPane, "Description updated");
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "Select an option");
                }
                
                DBQueryTag.CloseDB();
            }
            catch(Exception exception)
            {
                JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
            }
        }
        
        jTextAreaSetDescription.setText(null);
        
    }//GEN-LAST:event_jButtonUpdateDescActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterUser().setVisible(true);
            }
        });
    }
    
    private void TimerHandler()
    {
        if (SerialPortStateMachine == SerialPortStates.SerialPortIdle)
        {
            TimerInstance.stop();   
        }
        else if (SerialPortStateMachine == SerialPortStates.SerialPortSendF1Message)
        {
            try
            {
                /* Send F1 Message*/
                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                UartTransmit.println("F1:" + DBUsersTag.GetName());    
                System.out.println("Message F1 sent!!!");
                SerialPortStateMachine = SerialPortStates.SerialPortSendF2Message;
            }
            catch(Exception exception)
            {
                JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());   
            }
        }
        else if (SerialPortStateMachine == SerialPortStates.SerialPortSendF2Message)
        {
            try
            {
                PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                UartTransmit.println("F2:" + Integer.toString(DBUsersTag.GetRegister()));
                System.out.println("Message F2 sent!!!");
                SerialPortStateMachine = SerialPortStates.SerialPortIdle;
            }
            catch(Exception exception)
            {
                JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
            }           
        }
        else if (SerialPortStateMachine == SerialPortStates.SerialPortSendF3Message)
        {
            
        }
        else if (SerialPortStateMachine == SerialPortStates.SerialPortSendF4Message)
        {
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupLockers;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonRegister;
    private javax.swing.JButton jButtonRegisterMaterial;
    private javax.swing.JButton jButtonUpdateDesc;
    private javax.swing.JLabel jLabelDeleteRegister;
    private javax.swing.JLabel jLabelDeleteUser;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelRegister;
    private javax.swing.JLabel jLabelRegisterMaterial;
    private javax.swing.JLabel jLabelRegisterUser;
    private javax.swing.JRadioButton jRadioButtonLockerA;
    private javax.swing.JRadioButton jRadioButtonLockerB;
    private javax.swing.JRadioButton jRadioButtonLockerC;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaSetDescription;
    private javax.swing.JTextField jTextFieldDeleteRegister;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldRegister;
    // End of variables declaration//GEN-END:variables

    private class SerialPortListener implements SerialPortEventListener {
        
        /* Serial Port Listener class implementation */
        @Override
        public void serialEvent(SerialPortEvent SerialUartEvent) {
            try
            {
                serialEventHandler(SerialUartEvent);   
            }
            catch(Exception exception)
            {
                JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
            }
        }
        
        /* Handler for Serial Port inputs, this manages all the messages received from the KW36 Central Terminal */
        private void serialEventHandler(SerialPortEvent SerialUartEvent) throws Exception {
            
            switch (SerialUartEvent.getEventType())
            {
                /* Serial RX event received (notifyOnDataAvailable) */
                case SerialPortEvent.DATA_AVAILABLE:
                    
                    /* Create an scanner instance for the messages recieved */    
                    Scanner UartReceive = new Scanner(SerialPortInterface.getInputStream());
                    String Message = UartReceive.next();
                    String[] Messages = Message.split(":");
                    String MessageHeader = Messages[0];
                    String MessagePayload = Messages[1];
                    System.out.println("Packet received! " + Message);
                    
                    /* Decode the message */
                    /* BLE Status Response Packet Received */
                    if(MessageHeader.equals("F0"))
                    {
                        if(MessagePayload.equals("1"))
                        {
                            /* BLE Connected */
                            COMPort.SetBLEisConnected(true);
                            JOptionPane.showMessageDialog(rootPane, "Locker Connected!\n\r");
                        }
                        else if(MessagePayload.equals("0"))
                        {
                            /* BLE Disconnected */
                            COMPort.SetBLEisConnected(false);
                            JOptionPane.showMessageDialog(rootPane, "Locker Disconnected!\n\r");
                        }
                    }
                    /* Read User Name Packet Received */
                    else if(MessageHeader.equals("F5"))
                    {
                        //jTextFieldName.setText(MessagePayload);
                    }
                    /* Read User Register Packet Received */
                    else if(MessageHeader.equals("F6"))
                    {
//                        jTextFieldRegister.setText(MessagePayload);
//                        
//                        /* Create database objects */
//                        try
//                        {
//                            DBMaterialTag = new DBMaterial();
//                            DBQueryTag = new DBQuery();
//                            QueryResultVector = new Vector();
//            
//                            /* Search for the available lockers, update the description and unselect unavailable lockers */
//                            DBQueryTag.OpenDB();
//                            QueryResultVector = DBQueryTag.SelectMaterialTable(0);
//            
//                            if (!QueryResultVector.isEmpty())
//                            {
//                                String MaterialDescription = "";
//                                for(int index = 0; index < QueryResultVector.size(); index++)
//                                {
//                                    DBMaterialTag = (DBMaterial)QueryResultVector.elementAt(index);                   
//                                    if (DBMaterialTag.GetLockerId().equals("A"))
//                                    {
//                                        MaterialDescription = MaterialDescription + "Locker A:\n\r" + DBMaterialTag.GetLockerDescription() + "\n\r";
//                                        jRadioButtonLockerA.setEnabled(true);
//                                    }
//                                    else if (DBMaterialTag.GetLockerId().equals("B"))
//                                    {
//                                        MaterialDescription = MaterialDescription + "Locker B:\n\r" + DBMaterialTag.GetLockerDescription() + "\n\r";
//                                        jRadioButtonLockerB.setEnabled(true);
//                                    }
//                                    else
//                                    {
//                                        MaterialDescription = MaterialDescription + "Locker C:\n\r" + DBMaterialTag.GetLockerDescription() + "\n\r";
//                                        jRadioButtonLockerC.setEnabled(true);                        
//                                    }
//                                }
//                                
//                                jButtonRequest.setEnabled(true);
//                                jTextAreaDescription.setText(MaterialDescription);
//                            }
//                            else
//                            {        
//                                jTextFieldName.setText("");
//                                jTextFieldRegister.setText("");
//                                JOptionPane.showMessageDialog(rootPane, "All lockers are busy");
//                            }
//                            DBQueryTag.CloseDB();
//                        }
//                        catch(Exception exception)
//                        {
//                            JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
//                        }
                    }
                    
                    /* Close the UART Instance */
                    UartReceive.close();
                    UartReceive = null;
 
                break;    
            }
        }
    }    
}
