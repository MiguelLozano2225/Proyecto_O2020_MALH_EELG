/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VisualClass;

import ObjClass.COMPortInfo;
import ObjClass.DBQuery;
import ObjClass.DBMaterial;
import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.PrintStream;
import java.util.Enumeration;
import java.util.Scanner;
import java.util.Vector;
import javax.swing.JOptionPane;
import java.util.Arrays;
import javax.swing.Timer;

/**
 *
 * @author Edgar
 */
public class RequestMaterial extends javax.swing.JFrame {

    /* Create Objects */
    COMPortInfo COMPort = null;
    CommPort COMPortInterface = null;
    SerialPort SerialPortInterface = null;
    DBMaterial DBMaterialTag = null;  
    DBQuery DBQueryTag = null;
    Vector QueryResultVector = null;
    
    /* Application variables */
    /* Variables to update the locker status */
    String [] UserLockerIdToUpdate = new String [3];
    String [] UserNamesToUpdate = new String [3];
    int [] UserLockerKeysToUpdate = new int [3];
    int UserLockerStatusInfoSize;
    /* Variables to update the material status */
    int [] MaterialLockerAKeys = new int [3];
    int [] MaterialLockerBKeys = new int [3];
    int [] MaterialLockerCKeys = new int [3];
    int [] MaterialLockerABCCount = new int [3];
    /* Variable iteration */
    int indexSerialPortSendF7AMessage = 0;
    int indexSerialPortSendF7BMessage = 0;
    int indexSerialPortSendF7CMessageEachLocker = 0;
    int indexSerialPortSendF7CMessageEachMaterial = 0;
    
    /* Serial Port State Machine */
    enum SerialPortStates
    {
        SerialPortIdle,
        SerialPortSendF7AMessage,
        SerialPortSendF7BMessage,
        SerialPortSendF7CMessage,
    }
    SerialPortStates SerialPortStateMachine = SerialPortStates.SerialPortIdle;
    
    
    Timer TimerInstance = new Timer(1000, new ActionListener()
    {
        public void actionPerformed (ActionEvent evt)
        {
            TimerHandler();
        }
    });
    
    public RequestMaterial() {
        initComponents();
    }

    public RequestMaterial(COMPortInfo COMPort) throws Exception{
        
        initComponents();
        
        /* Get the list of the COM ports */
        Enumeration COMPortsEnum = CommPortIdentifier.getPortIdentifiers();
        CommPortIdentifier COMPortId = null;
        this.COMPort = COMPort;
        
        /* Connect with the COM port selected */
        while(COMPortsEnum.hasMoreElements())
        {
            COMPortId = (CommPortIdentifier) COMPortsEnum.nextElement();
            if(COMPortId.getName().equals(this.COMPort.GetCOMPortName()))
            {
                break;   
            }
        }
        
        /* Configure the Serial Port interface at 115200bps, 1 stop bit, no parity. Configure a listener for Serial Port inputs*/
        COMPortInterface = COMPortId.open("Serial Port", 1000);
        SerialPortInterface = (SerialPort)COMPortInterface;
        SerialPortInterface.setSerialPortParams(115200, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);
        SerialPortInterface.addEventListener(new RequestMaterial.SerialPortListener());
        SerialPortInterface.notifyOnDataAvailable(true);

        /* Send F0: BLE Status Request packet */
        PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
        UartTransmit.println("F0:");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupLockers = new javax.swing.ButtonGroup();
        jLabelRequestMaterial = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jLabelRegister = new javax.swing.JLabel();
        jRadioButtonLockerA = new javax.swing.JRadioButton();
        jRadioButtonLockerB = new javax.swing.JRadioButton();
        jRadioButtonLockerC = new javax.swing.JRadioButton();
        jButtonRequest = new javax.swing.JButton();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldRegister = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelRequestMaterial.setText("Request Material");

        jLabelName.setText("Name");

        jLabelRegister.setText("Register");

        buttonGroupLockers.add(jRadioButtonLockerA);
        jRadioButtonLockerA.setText("Locker A");
        jRadioButtonLockerA.setEnabled(false);

        buttonGroupLockers.add(jRadioButtonLockerB);
        jRadioButtonLockerB.setText("Locker B");
        jRadioButtonLockerB.setEnabled(false);

        buttonGroupLockers.add(jRadioButtonLockerC);
        jRadioButtonLockerC.setText("Locker C");
        jRadioButtonLockerC.setEnabled(false);

        jButtonRequest.setText("Request");
        jButtonRequest.setEnabled(false);
        jButtonRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRequestActionPerformed(evt);
            }
        });

        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDescription);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonLockerC)
                    .addComponent(jRadioButtonLockerB)
                    .addComponent(jRadioButtonLockerA)
                    .addComponent(jLabelRequestMaterial)
                    .addComponent(jButtonRequest)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelRegister)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldRegister)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelRequestMaterial)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelName)
                            .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelRegister)
                            .addComponent(jTextFieldRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(jRadioButtonLockerA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonLockerB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonLockerC)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRequest)
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRequestActionPerformed
        
        if (COMPort.GetBLEisConnected())
        {
            try
            {
                DBMaterialTag = new DBMaterial();
                DBQueryTag = new DBQuery();
                QueryResultVector = new Vector();
                DBQueryTag.OpenDB();
                
                if(jRadioButtonLockerA.isSelected())
                {
                    DBQueryTag.UpdateMaterialTableByRegister(1, jTextFieldName.getText(), Integer.parseInt(jTextFieldRegister.getText()), "A");
                    PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                    int UserKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                    DBQueryTag.UpdateMaterialTableUserKey(UserKey, "A");
                    UartTransmit.println("F3:A" + UserKey);
                    JOptionPane.showMessageDialog(rootPane, "Locker A requested successfully!");
                }
                else if(jRadioButtonLockerB.isSelected())
                {
                    DBQueryTag.UpdateMaterialTableByRegister(1, jTextFieldName.getText(), Integer.parseInt(jTextFieldRegister.getText()), "B");
                    PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                    int UserKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                    DBQueryTag.UpdateMaterialTableUserKey(UserKey, "B");
                    UartTransmit.println("F3:B" + UserKey);
                    JOptionPane.showMessageDialog(rootPane, "Locker B requested successfully!");
                }
                else if(jRadioButtonLockerC.isSelected())
                {
                    DBQueryTag.UpdateMaterialTableByRegister(1, jTextFieldName.getText(), Integer.parseInt(jTextFieldRegister.getText()), "C");
                    PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                    int UserKey = (int)Math.floor(Math.random()*(99999999-10000000+1)+10000000);
                    DBQueryTag.UpdateMaterialTableUserKey(UserKey, "C");
                    UartTransmit.println("F3:C" + UserKey);
                    JOptionPane.showMessageDialog(rootPane, "Locker C requested successfully!");
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "Select an option");
                }
                    
                /* Clear all selections */
                buttonGroupLockers.clearSelection();
                jRadioButtonLockerA.setEnabled(false);
                jRadioButtonLockerB.setEnabled(false);
                jRadioButtonLockerC.setEnabled(false);
                jButtonRequest.setEnabled(false);
                jTextAreaDescription.setText("");
                jTextFieldName.setText("");
                jTextFieldRegister.setText("");
            
                /* Search for the available lockers, update the description and unselect unavailable lockers */
                QueryResultVector = DBQueryTag.SelectMaterialTable(0);
                            
                if (!QueryResultVector.isEmpty())
                {
                    String MaterialDescription = "";
                    for(int index = 0; index < QueryResultVector.size(); index++)
                    {
                        DBMaterialTag = (DBMaterial)QueryResultVector.elementAt(index);                   
                        if (DBMaterialTag.GetLockerId().equals("A"))
                        {
                            MaterialDescription = MaterialDescription + "Locker A:\n\r" + DBMaterialTag.GetLockerDescription() + "\n\r";
                        }
                        else if (DBMaterialTag.GetLockerId().equals("B"))
                        {
                            MaterialDescription = MaterialDescription + "Locker B:\n\r" + DBMaterialTag.GetLockerDescription() + "\n\r";
                        }
                        else
                        {
                            MaterialDescription = MaterialDescription + "Locker C:\n\r" + DBMaterialTag.GetLockerDescription() + "\n\r";                      
                        }
                    }
                    
                    jTextAreaDescription.setText(MaterialDescription);
                }
                    
                DBQueryTag.CloseDB();
            }
            catch(Exception exception)
            {
                JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "Please connect via BLE with the locker");
        }
    }//GEN-LAST:event_jButtonRequestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RequestMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RequestMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RequestMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RequestMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }
    
    private void TimerHandler()
    {   
        
        if(SerialPortStateMachine == SerialPortStates.SerialPortSendF7AMessage)
        {
            if(indexSerialPortSendF7AMessage < UserLockerStatusInfoSize)
            {
                try
                {
                    PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                    UartTransmit.println("F7A:" + UserLockerIdToUpdate[indexSerialPortSendF7AMessage] + UserLockerKeysToUpdate[indexSerialPortSendF7AMessage]);
                    System.out.println("F7A:" + UserLockerIdToUpdate[indexSerialPortSendF7AMessage] + UserLockerKeysToUpdate[indexSerialPortSendF7AMessage]);
                    indexSerialPortSendF7AMessage++;
                }
                catch(Exception exception)
                {
                    JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                }
            }
            else
            {
                indexSerialPortSendF7AMessage = 0;
                SerialPortStateMachine = SerialPortStates.SerialPortSendF7BMessage;   
            }
        }
        else if (SerialPortStateMachine == SerialPortStates.SerialPortSendF7BMessage)
        {
            if(indexSerialPortSendF7BMessage < UserLockerStatusInfoSize)
            {
                try
                {
                    PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                    UartTransmit.println("F7B:" + UserLockerIdToUpdate[indexSerialPortSendF7BMessage] + UserNamesToUpdate[indexSerialPortSendF7BMessage]);
                    System.out.println("F7B:" + UserLockerIdToUpdate[indexSerialPortSendF7BMessage] + UserNamesToUpdate[indexSerialPortSendF7BMessage]);
                    indexSerialPortSendF7BMessage++;
                }
                catch(Exception exception)
                {
                    JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                }                
            }
            else
            {
                indexSerialPortSendF7BMessage = 0;
                SerialPortStateMachine = SerialPortStates.SerialPortSendF7CMessage;
            }
        }
        else if (SerialPortStateMachine == SerialPortStates.SerialPortSendF7CMessage)
        {
            /* Locker A Material Keys */
            if(indexSerialPortSendF7CMessageEachLocker == 0)
            {
                if(indexSerialPortSendF7CMessageEachMaterial < MaterialLockerABCCount[indexSerialPortSendF7CMessageEachLocker])
                {
                    try
                    {
                        PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                        UartTransmit.println("F7C:A" + (indexSerialPortSendF7CMessageEachMaterial+1) + MaterialLockerAKeys[indexSerialPortSendF7CMessageEachMaterial]);
                        System.out.println("F7C:A" + (indexSerialPortSendF7CMessageEachMaterial+1) + MaterialLockerAKeys[indexSerialPortSendF7CMessageEachMaterial]);
                        indexSerialPortSendF7CMessageEachMaterial++;
                    }
                    catch(Exception exception)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                    }                    
                }
                else
                {
                    MaterialLockerABCCount[indexSerialPortSendF7CMessageEachLocker] = 0;
                    indexSerialPortSendF7CMessageEachLocker++; 
                    indexSerialPortSendF7CMessageEachMaterial = 0;
                }
            }
            /* Locker B Material Keys */
            else if (indexSerialPortSendF7CMessageEachLocker == 1)
            {
                if(indexSerialPortSendF7CMessageEachMaterial < MaterialLockerABCCount[indexSerialPortSendF7CMessageEachLocker])
                {
                    try
                    {
                        PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                        UartTransmit.println("F7C:B" + (indexSerialPortSendF7CMessageEachMaterial+1) + MaterialLockerBKeys[indexSerialPortSendF7CMessageEachMaterial]);
                        System.out.println("F7C:B" + (indexSerialPortSendF7CMessageEachMaterial+1) + MaterialLockerBKeys[indexSerialPortSendF7CMessageEachMaterial]);                        
                        indexSerialPortSendF7CMessageEachMaterial++;
                    }
                    catch(Exception exception)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                    }                    
                }
                else
                {
                    MaterialLockerABCCount[indexSerialPortSendF7CMessageEachLocker] = 0;
                    indexSerialPortSendF7CMessageEachLocker++;
                    indexSerialPortSendF7CMessageEachMaterial = 0;
                }
            }
            /* Locker C Material Keys */
            else if (indexSerialPortSendF7CMessageEachLocker == 2)
            {
                if(indexSerialPortSendF7CMessageEachMaterial < MaterialLockerABCCount[indexSerialPortSendF7CMessageEachLocker])
                {
                    try
                    {
                        PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                        UartTransmit.println("F7C:C" + (indexSerialPortSendF7CMessageEachMaterial+1) + MaterialLockerCKeys[indexSerialPortSendF7CMessageEachMaterial]);
                        System.out.println("F7C:C" + (indexSerialPortSendF7CMessageEachMaterial+1) + MaterialLockerCKeys[indexSerialPortSendF7CMessageEachMaterial]);
                        indexSerialPortSendF7CMessageEachMaterial++;
                    }
                    catch(Exception exception)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                    }                    
                }
                else
                {
                    MaterialLockerABCCount[indexSerialPortSendF7CMessageEachLocker] = 0;
                    indexSerialPortSendF7CMessageEachLocker++;
                    indexSerialPortSendF7CMessageEachMaterial = 0;
                }                
            }
            else
            {
                indexSerialPortSendF7CMessageEachLocker = 0;
                SerialPortStateMachine = SerialPortStates.SerialPortIdle;
            }
        }
        else
        {
            TimerInstance.stop();
            /* BLE Connected */
            COMPort.SetBLEisConnected(true);
            JOptionPane.showMessageDialog(rootPane, "Locker Connected!\n\r");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupLockers;
    private javax.swing.JButton jButtonRequest;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelRegister;
    private javax.swing.JLabel jLabelRequestMaterial;
    private javax.swing.JRadioButton jRadioButtonLockerA;
    private javax.swing.JRadioButton jRadioButtonLockerB;
    private javax.swing.JRadioButton jRadioButtonLockerC;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldRegister;
    // End of variables declaration//GEN-END:variables

    private class SerialPortListener implements SerialPortEventListener {
        
        /* Serial Port Listener class implementation */
        @Override
        public void serialEvent(SerialPortEvent SerialUartEvent) {
            try
            {
                serialEventHandler(SerialUartEvent);   
            }
            catch(Exception exception)
            {
                JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
            }
        }
        
        /* Handler for Serial Port inputs, this manages all the messages received from the KW36 Central Terminal */
        private void serialEventHandler(SerialPortEvent SerialUartEvent) throws Exception {
            
            switch (SerialUartEvent.getEventType())
            {
                /* Serial RX event received (notifyOnDataAvailable) */
                case SerialPortEvent.DATA_AVAILABLE:
                    
                    /* Create an scanner instance for the messages recieved */    
                    Scanner UartReceive = new Scanner(SerialPortInterface.getInputStream());
                    String Message = UartReceive.next();
                    String[] Messages = Message.split(":");
                    String MessageHeader = Messages[0];
                    String MessagePayload = Messages[1];
                    System.out.println("Packet received! " + Message);
                    
                    /* Decode the message */
                    /* BLE Status Response Packet Received */
                    if(MessageHeader.equals("F0"))
                    {
                        if(MessagePayload.equals("1"))
                        {   
                            try
                            {
                                /* #EL: Implementar algo para buscar en la base de datos todos los lockers ocupados
                                cuando se reciba este evento, y mandar mensaje a la KW36 local para reservarlos en la KW36 remota */
                                
                                DBMaterialTag = new DBMaterial();
                                DBQueryTag = new DBQuery();
                                QueryResultVector = new Vector();
                                
                                DBQueryTag.OpenDB();
                                
                                /* Get the information of the unavailable lockers and update the KW36 remote board*/
                                QueryResultVector = DBQueryTag.SelectMaterialTable(1);
                                
                                if(!QueryResultVector.isEmpty())
                                {
                                    /* Write the DB LockerStatus, LockerRegisteredName and LockerKeys to the Locker KW36 */
                                    UserLockerStatusInfoSize = QueryResultVector.size();
                                    
                                    for(int index = 0; index < UserLockerStatusInfoSize; index++)
                                    {
                                        DBMaterialTag = (DBMaterial)QueryResultVector.elementAt(index);
                                        
                                        if (DBMaterialTag.GetLockerId().equals("A"))
                                        {
                                            UserLockerIdToUpdate[index] = "A";
                                            UserNamesToUpdate[index] = DBMaterialTag.GetLockerRegisteredName();
                                            UserLockerKeysToUpdate[index] = DBMaterialTag.GetLockerUserKey();    
                                        }
                                        else if (DBMaterialTag.GetLockerId().equals("B"))
                                        {
                                            UserLockerIdToUpdate[index] = "B";
                                            UserNamesToUpdate[index] = DBMaterialTag.GetLockerRegisteredName();
                                            UserLockerKeysToUpdate[index] = DBMaterialTag.GetLockerUserKey(); 
                                        }
                                        else if (DBMaterialTag.GetLockerId().equals("C"))
                                        {
                                            UserLockerIdToUpdate[index] = "C";
                                            UserNamesToUpdate[index] = DBMaterialTag.GetLockerRegisteredName();
                                            UserLockerKeysToUpdate[index] = DBMaterialTag.GetLockerUserKey(); 
                                        }
                                    }    
                                }
                                
                                /* Get the equipment keys */
                                QueryResultVector = DBQueryTag.SelectMaterialTableByMaterialCount(0);
                                
                                if(!QueryResultVector.isEmpty())
                                {
                                    /* Write material keys to the Locker KW36 */
                                    for(int index = 0; index < QueryResultVector.size(); index++)
                                    {
                                        DBMaterialTag = (DBMaterial)QueryResultVector.elementAt(index);
                                      
                                        for (int indexMaterial = 0; indexMaterial < DBMaterialTag.GetLockerMaterialCount(); indexMaterial++)
                                        {
                                            if (DBMaterialTag.GetLockerId().equals("A"))
                                            {   
                                                MaterialLockerABCCount[0] = DBMaterialTag.GetLockerMaterialCount();
                                                if(indexMaterial == 0)
                                                {
                                                    MaterialLockerAKeys[indexMaterial] = DBMaterialTag.GetLockerMaterialAKey();
                                                }
                                                else if (indexMaterial == 1)
                                                {
                                                    MaterialLockerAKeys[indexMaterial] = DBMaterialTag.GetLockerMaterialBKey();
                                                }
                                                else
                                                {
                                                    MaterialLockerAKeys[indexMaterial] = DBMaterialTag.GetLockerMaterialCKey();
                                                }
                                            }
                                            else if (DBMaterialTag.GetLockerId().equals("B"))
                                            {
                                                MaterialLockerABCCount[1] = DBMaterialTag.GetLockerMaterialCount();
                                                if(indexMaterial == 0)
                                                {
                                                    MaterialLockerBKeys[indexMaterial] = DBMaterialTag.GetLockerMaterialAKey();
                                                }
                                                else if (indexMaterial == 1)
                                                {
                                                    MaterialLockerBKeys[indexMaterial] = DBMaterialTag.GetLockerMaterialBKey();
                                                }
                                                else
                                                {
                                                    MaterialLockerBKeys[indexMaterial] = DBMaterialTag.GetLockerMaterialCKey();
                                                }
                                            }
                                            else if (DBMaterialTag.GetLockerId().equals("C"))
                                            {
                                                MaterialLockerABCCount[2] = DBMaterialTag.GetLockerMaterialCount();
                                                if(indexMaterial == 0)
                                                {
                                                    MaterialLockerCKeys[indexMaterial] = DBMaterialTag.GetLockerMaterialAKey();
                                                }
                                                else if (indexMaterial == 1)
                                                {
                                                    MaterialLockerCKeys[indexMaterial] = DBMaterialTag.GetLockerMaterialBKey();
                                                }
                                                else
                                                {
                                                    MaterialLockerCKeys[indexMaterial] = DBMaterialTag.GetLockerMaterialCKey();
                                                }
                                            }
                                        }
                                    } 
                                }
                                
                                DBQueryTag.CloseDB();
                            }
                            catch(Exception exception)
                            {
                                JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                            }
                            
                            /* Start the transference of the DB information to the locker */
                            SerialPortStateMachine = SerialPortStates.SerialPortSendF7AMessage;
                            TimerInstance.start();
                        }
                        else if(MessagePayload.equals("0"))
                        {
                            /* BLE Disconnected */
                            COMPort.SetBLEisConnected(false);
                            JOptionPane.showMessageDialog(rootPane, "Locker Disconnected!\n\r");
                        }
                    }
                    /* Read User Name Packet Received */
                    else if(MessageHeader.equals("F5"))
                    {
                        jTextFieldName.setText(MessagePayload);
                    }
                    /* Read User Register Packet Received */
                    else if(MessageHeader.equals("F6"))
                    {
                        jTextFieldRegister.setText(MessagePayload);
                        
                        try
                        {
                            /* Send the message to get the current status of each locker */
                            PrintStream UartTransmit = new PrintStream(SerialPortInterface.getOutputStream());
                            UartTransmit.println("F8:");
                        }
                        catch(Exception exception)
                        {
                            JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                        }
                    }
                    else if(MessageHeader.equals("F7"))
                    {
                        try
                        {
                            
                        }
                        catch(Exception exception)
                        {
                            JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                        }                        
                    }
                    else if (MessageHeader.equals("F9"))
                    {
                        try
                        {
                            DBMaterialTag = new DBMaterial();
                            DBQueryTag = new DBQuery();
                            QueryResultVector = new Vector();
                            
                            DBQueryTag.OpenDB();
                            
                            /* Update the status of the available lockers */
                            /* Locker A is empty, update the SQL database */
                            if('0' == MessagePayload.charAt(0))
                            {
                                DBQueryTag.UpdateMaterialTableLockerStatus(0, "A");
                            }
                            /* Locker B is empty, update the SQL database */
                            if('0' == MessagePayload.charAt(1))
                            {
                                DBQueryTag.UpdateMaterialTableLockerStatus(0, "B");
                            }
                            /* Locker C is empty, update the SQL database */
                            if('0' == MessagePayload.charAt(2))
                            {
                                DBQueryTag.UpdateMaterialTableLockerStatus(0, "C");
                            }
            
                            /* Search for the available lockers, update the description and unselect unavailable lockers */
                            QueryResultVector = DBQueryTag.SelectMaterialTable(0);
            
                            if (!QueryResultVector.isEmpty())
                            {
                                String MaterialDescription = "";
                                for(int index = 0; index < QueryResultVector.size(); index++)
                                {
                                    DBMaterialTag = (DBMaterial)QueryResultVector.elementAt(index);                   
                                    if (DBMaterialTag.GetLockerId().equals("A"))
                                    {
                                        MaterialDescription = MaterialDescription + "Locker A:\n\r" + DBMaterialTag.GetLockerDescription() + "\n\r";
                                        jRadioButtonLockerA.setEnabled(true);
                                    }
                                    else if (DBMaterialTag.GetLockerId().equals("B"))
                                    {
                                        MaterialDescription = MaterialDescription + "Locker B:\n\r" + DBMaterialTag.GetLockerDescription() + "\n\r";
                                        jRadioButtonLockerB.setEnabled(true);
                                    }
                                    else
                                    {
                                        MaterialDescription = MaterialDescription + "Locker C:\n\r" + DBMaterialTag.GetLockerDescription() + "\n\r";
                                        jRadioButtonLockerC.setEnabled(true);                        
                                    }
                                }
                                
                                jButtonRequest.setEnabled(true);
                                jTextAreaDescription.setText(MaterialDescription);
                            }
                            else
                            {        
                                jTextFieldName.setText("");
                                jTextFieldRegister.setText("");
                                JOptionPane.showMessageDialog(rootPane, "All lockers are busy");
                            }
                            DBQueryTag.CloseDB();
                            
                        }
                        catch(Exception exception)
                        {
                            JOptionPane.showMessageDialog(rootPane, "Unexpected error\n\r" + exception.getMessage());
                        } 
                    }
                    
                    /* Close the UART Instance */
                    UartReceive.close();
                    UartReceive = null;
 
                break;    
            }
        }
    }
}


